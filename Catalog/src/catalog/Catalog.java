package catalog;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled Catalog
//  @ File Name : Catalog.java
//  @ Date : 5/27/2014
//  @ Author :  Buzea Vlad-Calin
//
//




public class Catalog extends Observable {
	private List<Grade> grades;
	private Map<String,Student> students;
	private Map<String,Professor> professors;
	private Map<String,Group> groups;
	private Map<String,Room> rooms;
	private Map<String,Course> courses;
	public static final SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	
	//Singleton
	private static Catalog instance;
	
	//DB
	private static final String DB_URL = "jdbc:mysql://localhost/school_buzea";
	private Connection conn = null;
	private Statement stmt = null;
	//
	/**
	 * Connects to the school database and transfers the information in the Catalog class
	 */
	private Catalog(){
		
			setGrades(new ArrayList<Grade>());
			setStudents(new HashMap<String,Student>());
			setProfessors(new HashMap<String,Professor>());
			setGroups(new HashMap<String,Group>());
			setRooms(new HashMap<String,Room>());
			setCourses(new HashMap<String,Course>());
			 try {Class.forName("com.mysql.jdbc.Driver");
			
			conn = DriverManager.getConnection(DB_URL,"root","");
			stmt = conn.createStatement();
		
			//Form Groups
			String sql2="Select * from grupa";
			ResultSet rs = stmt.executeQuery(sql2);
			while(rs.next()){
				String idg=rs.getString("idg");
				String faculty=rs.getString("sectie");
				int year=rs.getInt("an");
				Group temp=new Group(idg,faculty,year);
				groups.put(idg,temp);
				
			}
			//Form Students
			sql2="Select * from student";
			rs=stmt.executeQuery(sql2);
			while(rs.next()){
		    	 String idg=rs.getString("idg");
		    	 Group temp=groups.get(idg);
		    	 String SSID=rs.getString("nr_matricol");
		    	 String firstName=rs.getString("prenume");
		    	 String lastName=rs.getString("nume");
		    	 String address=rs.getString("adresa");
		    	 Student stud=new Student(SSID,firstName,lastName,address,temp);
		    	 students.put(SSID,stud);
		    	 
		    	 
		    	  
		      }
			//Form Professors
			sql2="SELECT idprofesor,profesor.nume,prenume,email,telefon,departament.nume as \"departament\" FROM profesor join departament on profesor.idd=departament.idd";
			rs=stmt.executeQuery(sql2);
			while(rs.next()){
				String SSID=rs.getString("idprofesor");
				String firstName=rs.getString("prenume");
				String lastName=rs.getString("nume");
				String email=rs.getString("email");
				String phone=rs.getString("telefon");
				String departament=rs.getString("departament");
				Professor temp=new Professor(SSID,firstName,lastName,email,phone,departament);
				professors.put(SSID,temp);
				
			}
			//form Rooms
			sql2="SELECT * FROM sala";
			rs=stmt.executeQuery(sql2);
			while(rs.next()){
				String idRoom=rs.getString("idsala");
				String address=rs.getString("adresa");
				int capacity=rs.getInt("capacitate");
				Room temp;
				if(capacity==0)
					temp=new Room(idRoom,address);
				else
					temp=new Room(idRoom,address,capacity);
				rooms.put(idRoom, temp);
				
			}
			//form Courses
			sql2="SELECT * FROM curs";
			rs=stmt.executeQuery(sql2);
			while(rs.next()){
				String id=rs.getString("id_curs");
				String name=rs.getString("Denumire");
				String day=rs.getString("zi");
				String hour=rs.getString("ora");
				String idProf=rs.getString("idprofesor");
				String idRoom=rs.getString("idsala");
				String idg=rs.getString("idg");
				Group group=groups.get(idg);
				Room rTemp=rooms.get(idRoom);
				Professor teacher=professors.get(idProf);
				Course curs=new Course(id,name,day,hour,group, teacher,rTemp);
				courses.put(id, curs);
				
			}
			//form Catalog
			sql2="SELECT * FROM catalog";
			rs=stmt.executeQuery(sql2);
			while(rs.next()){
				String ids=rs.getString("ids");
				String idcurs=rs.getString("idcurs");
				String dat=rs.getString("data");
				double mark=rs.getDouble("nota");
				Student stud=students.get(ids);
				Course curs=courses.get(idcurs);
				String[] tokens=dat.split("-");
				Calendar data=new GregorianCalendar(Integer.parseInt(tokens[0]),Integer.parseInt(tokens[1]) - 1 ,Integer.parseInt(tokens[2]));
				Grade temp=new Grade(stud,curs,data,mark);
				grades.add(temp);
				
			}
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}catch(Exception e){
		      //Handle errors for Class.forName
		      e.printStackTrace();
		   }
		 
	}
	/**
	 * Connects to the DataBase
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public void connect() throws ClassNotFoundException, SQLException{
		Class.forName("com.mysql.jdbc.Driver");
		
		conn = DriverManager.getConnection(DB_URL,"root","");
		stmt = conn.createStatement();
	}
	/**
	 * Closes the connection to the DataBase
	 */
	public void closeConnection(){
		try{
	         if(stmt!=null)
	            conn.close();
	      }catch(SQLException se){
	    	  se.printStackTrace();
	      }
	      try{
	         if(conn!=null)
	            conn.close();
	      }catch(SQLException se){
	         se.printStackTrace();
	      }
		
	}
	
	
	/**
	 * Adds a new grade. Course and Student must already exists in the database.
	 * @param idStudent the id of the Student that is graded
	 * @param idCourse the id of the course 
	 * @param date the date of the grade
	 * @param mark the mark of the grade
	 * @return true if success, false for failure
	 * @throws SQLException 
	 */
	public boolean addGrade(String idStudent,String idCourse,Calendar date,double mark) throws SQLException{
		Student stud=students.get(idStudent);
		if(stud==null)
			return false;
		Course curs=courses.get(idCourse);
		if(curs==null)
			return false;
		if(date==null)
			return false;
		if(mark<1.0)
			return false;
		if(mark>10.0)
			return false;
		Grade temp=new Grade(stud,curs,date,mark);
		
		
	
			String sql = "INSERT INTO `school_buzea`.`catalog` (`ids`, `idcurs`, `data`, `nota`) VALUES ('"+idStudent+"', '"+idCourse+"', '"+format1.format(date.getTime())+"', '"+mark+"');";
			stmt.executeUpdate(sql);
			grades.add(temp);
		
		
		this.setChanged();
		this.notifyObservers("Added Grade");
		return true;
		
	}
	/**
	 * Deletes a grade from the catalog
	 * @param idStudent student ssid
	 * @param idCourse course id
	 * @param date date of grade
	 * @return true for success, false for failure
	 * @throws SQLException 
	 */
	public boolean deleteGrade(String idStudent,String idCourse,Calendar date) throws SQLException{
		Student stud=students.get(idStudent);
		if(stud==null)
			return false;
		Course curs=courses.get(idCourse);
		if(curs==null)
			return false;
		if(date==null)
			return false;
	
   
	
			String sql = "DELETE FROM `school_buzea`.`catalog` WHERE `catalog`.`ids` = "+idStudent+" AND `catalog`.`idcurs` = "+idCourse+" AND `catalog`.`data` = '"+format1.format(date.getTime())+"'";
			stmt.executeUpdate(sql);
			//!!!!!!!!!! DELETE from grades;
			Iterator<Grade> i=grades.iterator();
			Grade tmp;
			int index=-1;
			boolean found=false;
			while(i.hasNext() &&!found ){
				tmp=i.next();
				if(tmp.getCourse().getIdCourse().equals(idCourse))
					if(idStudent.equals(tmp.getStudent().getSSID()))
						if(date.equals(tmp.getDate()))
							{index=grades.indexOf(tmp);found=true;}
			}
			if(found)
				grades.remove(index);
			else
				return false;
			
		this.setChanged();
		this.notifyObservers("Deleted Grade");
		return true;
	}
	
	
	/**
	 * Updates the mark regarding a specific student,course and date
	 * @param idStudent student SSID
	 * @param idCourse course ID
	 * @param date date of the grade
	 * @param newMark the new mark that the Grade will have
	 * @return true for success,false otherwise
	 * @throws SQLException 
	 */
	public boolean updateGrade(String idStudent,String idCourse,Calendar date,double newMark) throws SQLException{
		if(deleteGrade(idStudent,idCourse,date))
			return addGrade(idStudent,idCourse,date,newMark);
		
		return false;
	}
	
	/**
	 * Retrieves the unique instance of the catalog.
	 * @return the Catalog unique instance
	 */
	public static Catalog getInstance(){
		if(instance==null)
			instance=new Catalog();
		return instance;
		
	}
	/**
	 * Verifies login credentials
	 * @param username user name
	 * @param password password
	 * @return true if correct login, false otherwise
	 */
	public  boolean login(String username,String password,int level){
		String sql2="SELECT password,acces FROM conturi WHERE username='"+username+"'";
		ResultSet rs;
		try {
			rs = stmt.executeQuery(sql2);
			while(rs.next()){
				String pass=rs.getString("password");
				int acces=rs.getInt("acces");
				if(level!=acces)
					return false;
				if(pass.equals(password))
					return true;
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		
		return false;
	}
	/**
	 * Gets the SSID of the owner of the account specified as parameter
	 * @param username account username
	 * @param password account password
	 * @return onwer SSID
	 */
	public String getOwnerId(String username,String password){
		String sql2="SELECT owner_id FROM conturi WHERE username='"+username+"'";
		ResultSet rs;
		String id="";
		try {
			rs = stmt.executeQuery(sql2);
			while(rs.next()){
				id=rs.getString("owner_id");
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		return id;
		
	}
	
	void forceNotify(){
		this.setChanged();
		this.notifyObservers("forced");
	}
	
	/**
	 * Adds a new user to the system
	 * @param username the user name
	 * @param password the password
	 * @param level access level
	 * @throws SQLException 
	 */
	public void addUser(String username,String password,int level,String onwerId) throws AccountConflictException{
		if(level<0|| level>3)
			throw new AccountConflictException("Invalid clearence level");
		String sql2="INSERT INTO `school_buzea`.`conturi` (`username`, `password`,`acces`,`owner_id`) VALUES ('"+username+"', '"+password+"' ,'"+level+"', '"+onwerId+"');";
		 try {
			stmt.executeUpdate(sql2);
			
			this.setChanged();
			this.notifyObservers("Added User");
		} catch (SQLException e) {
			throw new AccountConflictException(e.getMessage());
		}
		 
	}
	/**
	 * Adds new student to the DataBase
	 * @param SSID student SSID
	 * @param firstName student firstName
	 * @param lastName student lastName
	 * @param address student address
	 * @param group reference to enrollment group
	 * @throws SQLException 
	 */
	public void enrollStudent(String SSID,String firstName,String lastName,String address,Group group) throws SQLException{
		
		String sql="INSERT INTO `school_buzea`.`student` (`nr_matricol`, `prenume`, `nume`, `adresa`, `idg`) VALUES ('"+SSID+"', '"+firstName+"', '"+lastName+"', '"+address+"', '"+group.getIdg()+"');";
		
			stmt.executeUpdate(sql);
			Student temp=new Student(SSID,firstName,lastName,address,group);
			students.put(SSID, temp);
			this.setChanged();
			this.notifyObservers("Added Student");
		
		
	}
	/**
	 * Adds new Professor in the system.
	 * The name of the department will be loaded in the system only after synchronization with the database is performed.
	 * @param SSID professor's SSID
	 * @param firstName professor's first Name
	 * @param lastName professor's last Name
	 * @param email professor's email
	 * @param phone professor's phone
	 * @param departamentId professor's department id number
	 * @throws SQLException 
	 */
	public void addProfessor(String SSID,String firstName,String lastName,String email,String phone,int departamentId) throws SQLException{
		String sql="INSERT INTO `school_buzea`.`profesor` (`idprofesor`, `nume`, `prenume`, `email`, `telefon`, `idd`) VALUES ('"+SSID+"', '"+lastName+"', '"+firstName+"', '"+email+"' , '"+phone+"', '"+departamentId+"');";
		
			stmt.executeUpdate(sql);
			Professor temo=new Professor(SSID,firstName,lastName,email,phone,"");
			professors.put(SSID, temo);
			this.setChanged();
			this.notifyObservers("Added Professor");
		
		
	}
	/**
	 * Registers a new room in the system
	 * @param id room name
	 * @param address room address
	 * @param capacity room capacity
	 * @throws SQLException
	 * @throws Exception
	 */
	public void addRoom(String id,String address,int capacity) throws SQLException,Exception{
		if(capacity<0)
			throw new Exception("Invalid capacity");
		String sql="INSERT INTO `school_buzea`.`sala` (`idsala`, `adresa`, `capacitate`) VALUES ('"+id+"', '"+address+"', '"+capacity+"');";
		stmt.executeUpdate(sql);
		Room temp=new Room(id,address,capacity);
		rooms.put(id, temp);
		this.setChanged();
		this.notifyObservers("Added Room");
		
	}
	/**
	 * Registers a new group in the system
	 * @param id group name
	 * @param faculty group faculty
	 * @param year group's year of study
	 * @throws Exception
	 */
	public void addGroup(String id,String faculty,int year) throws Exception
	{
		if(year<1)
			throw new Exception("Invalid year!");
		String sql="INSERT INTO `school_buzea`.`grupa` (`idg`, `sectie`, `an`) VALUES ('"+id+"', '"+faculty+"', '"+year+"');";
		stmt.executeUpdate(sql);
		Group temp=new Group(id,faculty,year);
		groups.put(id,temp);
		this.setChanged();
		this.notifyObservers("Added Group");
		
	}
	/**
	 * Adds a new course in the system
	 * @param idCourse course id
	 * @param name course name
	 * @param zi day when course is held
	 * @param ora hour when course is held
	 * @param group 
	 * @param professor
	 * @param room
	 * @throws Exception
	 */
	public void addCourse(String idCourse,String name,String zi,String ora,Group group,Professor professor,Room room) throws Exception{
		if(!isNumeric(ora))
			throw new Exception("Invalid hour");
		if(!isDay(zi))
			throw new Exception("Invalid day");
		
		
		String sql="INSERT INTO `school_buzea`.`curs` (`id_curs`, `Denumire`, `zi`, `ora`, `idg`, `idprofesor`, `idsala`) VALUES ('"+idCourse+"', '"+name+"', '"+zi+"', '"+ora+"', '"+group.getIdg()+"', '"+professor.getSSID()+"', '"+room.getIdRoom()+"');";
		stmt.executeUpdate(sql);
		Course temp=new Course(idCourse,name,zi,ora,group,professor,room);
		courses.put(idCourse, temp);
		this.setChanged();
		this.notifyObservers("Added Course");
		
	}
	/**
	 * Returns true if the transmitted String is a number
	 * @param str String to evaluate
	 * @return true is number, false otherwise
	 */
	public static boolean isNumeric(String str)
	{
	    for (char c : str.toCharArray())
	    {
	        if (!Character.isDigit(c)) return false;
	    }
	    return true;
	}
	private static boolean isDay(String day){
		
		if(day.equalsIgnoreCase("Monday"))
			return true;
		if(day.equalsIgnoreCase("Tuesday"))
			return true;
		if(day.equalsIgnoreCase("Wednesday"))
			return true;
		if(day.equalsIgnoreCase("Thursday"))
			return true;
		if(day.equalsIgnoreCase("Friday"))
			return true;
		if(day.equalsIgnoreCase("Saturday"))
			return true;
		if(day.equalsIgnoreCase("Sunday"))
			return true;
		
		if(day.equalsIgnoreCase("luni"))
			return true;
		if(day.equalsIgnoreCase("marti"))
			return true;
		if(day.equalsIgnoreCase("miercuri"))
			return true;
		if(day.equalsIgnoreCase("joi"))
			return true;
		if(day.equalsIgnoreCase("vineri"))
			return true;
		if(day.equalsIgnoreCase("sambata"))
			return true;
		if(day.equalsIgnoreCase("duminica"))
			return true;
		
		
		
		return false;
	}
	
	/**
	 * Getter method for the grades.
	 * @return the grades
	 */
	public List<Grade> getGrades() {
		return grades;
	}
	/**
	 * Returns a vector with the Department IDs registered in the database
	 * @return vector with the Department IDs registered in the database
	 */
	Vector<Integer> getDeparmentIds(){
		String sql2="SELECT idd FROM departament";
		ResultSet rs;
		Vector<Integer>v=new Vector<Integer>();
		int arg;
		try {
			rs = stmt.executeQuery(sql2);
			while(rs.next()){
			arg=rs.getInt("idd");
			v.add(arg);
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		
		return v;
	}
	
	/**
	 * 
	 * Setter method.
	 * @param grades the grades to set
	 */
	public void setGrades(List<Grade> grades) {
		this.grades = grades;
	}

	/**
	 * Getter method.
	 * @return the professors
	 */
	public Map<String,Professor> getProfessors() {
		return professors;
	}

	/**
	 * Setter method.
	 * @param professors the professors to set
	 */
	public void setProfessors(Map<String,Professor> professors) {
		this.professors = professors;
	}

	/**
	 * Getter method.
	 * @return the groups
	 */
	public Map<String,Group> getGroups() {
		return groups;
	}

	/**
	 * Setter method.
	 * @param groups the groups to set
	 */
	public void setGroups(Map<String,Group> groups) {
		this.groups = groups;
	}

	/**
	 * Getter method.
	 * @return the students
	 */
	public Map<String,Student> getStudents() {
		return students;
	}

	/**
	 * Setter method.
	 * @param students the students to set
	 */
	public void setStudents(Map<String,Student> students) {
		this.students = students;
	}

	/**
	 * Getter method.
	 * @return the rooms
	 */
	public Map<String,Room> getRooms() {
		return rooms;
	}

	/**
	 * Setter method.
	 * @param rooms the rooms to set
	 */
	public void setRooms(Map<String,Room> rooms) {
		this.rooms = rooms;
	}

	/**
	 * Getter method.
	 * @return the courses
	 */
	public Map<String,Course> getCourses() {
		return courses;
	}

	/**
	 * Setter method.
	 * @param courses the courses to set
	 */
	public void setCourses(Map<String,Course> courses) {
		this.courses = courses;
	}

	
	
}
